//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DslModeling = global::Microsoft.VisualStudio.Modeling;
using DslDesign = global::Microsoft.VisualStudio.Modeling.Design;
namespace EPAM.NHModelingLanguage
{
	/// <summary>
	/// DomainClass NHModel
	/// Description for EPAM.NHModelingLanguage.NHModel
	/// </summary>
	[DslDesign::DisplayNameResource("EPAM.NHModelingLanguage.NHModel.DisplayName", typeof(global::EPAM.NHModelingLanguage.NHModelingLanguageDomainModel), "SKBKontur.NHModelingLanguage.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("EPAM.NHModelingLanguage.NHModel.Description", typeof(global::EPAM.NHModelingLanguage.NHModelingLanguageDomainModel), "SKBKontur.NHModelingLanguage.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::EPAM.NHModelingLanguage.NHModelingLanguageDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("97799dd1-d93c-4c2f-bacc-fcf4a36f94f0")]
	public partial class NHModel : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// NHModel domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x97799dd1, 0xd93c, 0x4c2f, 0xba, 0xcc, 0xfc, 0xf4, 0xa3, 0x6f, 0x94, 0xf0);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public NHModel(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public NHModel(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Entities opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Entities.
		/// Description for EPAM.NHModelingLanguage.NHModelHasEntities.NHModel
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Entity> Entities
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Entity>, Entity>(global::EPAM.NHModelingLanguage.NHModelHasEntities.NHModelDomainRoleId);
			}
		}
		#endregion
		#region ElementGroupPrototype Merge methods
		/// <summary>
		/// Returns a value indicating whether the source element represented by the
		/// specified root ProtoElement can be added to this element.
		/// </summary>
		/// <param name="rootElement">
		/// The root ProtoElement representing a source element.  This can be null, 
		/// in which case the ElementGroupPrototype does not contain an ProtoElements
		/// and the code should inspect the ElementGroupPrototype context information.
		/// </param>
		/// <param name="elementGroupPrototype">The ElementGroupPrototype that contains the root ProtoElement.</param>
		/// <returns>true if the source element represented by the ProtoElement can be added to this target element.</returns>
		protected override bool CanMerge(DslModeling::ProtoElementBase rootElement, DslModeling::ElementGroupPrototype elementGroupPrototype)
		{
			if ( elementGroupPrototype == null ) throw new global::System.ArgumentNullException("elementGroupPrototype");
			
			if (rootElement != null)
			{
				DslModeling::DomainClassInfo rootElementDomainInfo = this.Partition.DomainDataDirectory.GetDomainClass(rootElement.DomainClassId);
				
				if (rootElementDomainInfo.IsDerivedFrom(global::EPAM.NHModelingLanguage.Entity.DomainClassId)) 
				{
					return true;
				}
			}
			return base.CanMerge(rootElement, elementGroupPrototype);
		}
		
		/// <summary>
		/// Called by the Merge process to create a relationship between 
		/// this target element and the specified source element. 
		/// Typically, a parent-child relationship is established
		/// between the target element (the parent) and the source element 
		/// (the child), but any relationship can be established.
		/// </summary>
		/// <param name="sourceElement">The element that is to be related to this model element.</param>
		/// <param name="elementGroup">The group of source ModelElements that have been rehydrated into the target store.</param>
		/// <remarks>
		/// This method is overriden to create the relationship between the target element and the specified source element.
		/// The base method does nothing.
		/// </remarks>
		protected override void MergeRelate(DslModeling::ModelElement sourceElement, DslModeling::ElementGroup elementGroup)
		{
			// In general, sourceElement is allowed to be null, meaning that the elementGroup must be parsed for special cases.
			// However this is not supported in generated code.  Use double-deriving on this class and then override MergeRelate completely if you 
			// need to support this case.
			if ( sourceElement == null ) throw new global::System.ArgumentNullException("sourceElement");
		
				
			global::EPAM.NHModelingLanguage.Entity sourceEntity1 = sourceElement as global::EPAM.NHModelingLanguage.Entity;
			if (sourceEntity1 != null)
			{
				// Create link for path NHModelHasEntities.Entities
				this.Entities.Add(sourceEntity1);

				return;
			}
		
			// Sdk workaround to runtime bug #879350 (DSL: can't copy and paste a MEL that has a MEX). Avoid MergeRelate on ModelElementExtension
			// during a "Paste".
			if (sourceElement is DslModeling::ExtensionElement
				&& sourceElement.Store.TransactionManager.CurrentTransaction.TopLevelTransaction.Context.ContextInfo.ContainsKey("{9DAFD42A-DC0E-4d78-8C3F-8266B2CF8B33}"))
			{
				return;
			}
		
			// Fall through to base class if this class hasn't handled the merge.
			base.MergeRelate(sourceElement, elementGroup);
		}
		
		/// <summary>
		/// Performs operation opposite to MergeRelate - i.e. disconnects a given
		/// element from the current one (removes links created by MergeRelate).
		/// </summary>
		/// <param name="sourceElement">Element to be unmerged/disconnected.</param>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
		protected override void MergeDisconnect(DslModeling::ModelElement sourceElement)
		{
			if (sourceElement == null) throw new global::System.ArgumentNullException("sourceElement");
				
			global::EPAM.NHModelingLanguage.Entity sourceEntity1 = sourceElement as global::EPAM.NHModelingLanguage.Entity;
			if (sourceEntity1 != null)
			{
				// Delete link for path NHModelHasEntities.Entities
				
				foreach (DslModeling::ElementLink link in global::EPAM.NHModelingLanguage.NHModelHasEntities.GetLinks((global::EPAM.NHModelingLanguage.NHModel)this, sourceEntity1))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::EPAM.NHModelingLanguage.NHModelHasEntities.NHModelDomainRoleId, global::EPAM.NHModelingLanguage.NHModelHasEntities.EntityDomainRoleId);
				}

				return;
			}
			// Fall through to base class if this class hasn't handled the unmerge.
			base.MergeDisconnect(sourceElement);
		}
		#endregion
	}
}
namespace EPAM.NHModelingLanguage
{
	/// <summary>
	/// DomainClass Entity
	/// Description for EPAM.NHModelingLanguage.Entity
	/// </summary>
	[DslDesign::DisplayNameResource("EPAM.NHModelingLanguage.Entity.DisplayName", typeof(global::EPAM.NHModelingLanguage.NHModelingLanguageDomainModel), "SKBKontur.NHModelingLanguage.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("EPAM.NHModelingLanguage.Entity.Description", typeof(global::EPAM.NHModelingLanguage.NHModelingLanguageDomainModel), "SKBKontur.NHModelingLanguage.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::EPAM.NHModelingLanguage.NHModelingLanguageDomainModel))]
	[global::System.CLSCompliant(true)]
	[global::System.Diagnostics.DebuggerDisplay("{GetType().Name,nq} (Name = {namePropertyStorage})")]
	[DslModeling::DomainObjectId("205b3bdf-94ad-43f3-a9af-d520a1a20ace")]
	public partial class Entity : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// Entity domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x205b3bdf, 0x94ad, 0x43f3, 0xa9, 0xaf, 0xd5, 0x20, 0xa1, 0xa2, 0x0a, 0xce);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Entity(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Entity(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Name domain property code
		
		/// <summary>
		/// Name domain property Id.
		/// </summary>
		public static readonly global::System.Guid NameDomainPropertyId = new global::System.Guid(0xc5871ad9, 0xa942, 0x4754, 0xbe, 0x67, 0xaa, 0x81, 0x5e, 0xab, 0x5f, 0xa2);
		
		/// <summary>
		/// Storage for Name
		/// </summary>
		private global::System.String namePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Name domain property.
		/// Description for EPAM.NHModelingLanguage.Entity.Name
		/// </summary>
		[DslDesign::DisplayNameResource("EPAM.NHModelingLanguage.Entity/Name.DisplayName", typeof(global::EPAM.NHModelingLanguage.NHModelingLanguageDomainModel), "SKBKontur.NHModelingLanguage.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("EPAM.NHModelingLanguage.Entity/Name.Description", typeof(global::EPAM.NHModelingLanguage.NHModelingLanguageDomainModel), "SKBKontur.NHModelingLanguage.GeneratedCode.DomainModelResx")]
		[DslModeling::ElementName]
		[DslModeling::DomainObjectId("c5871ad9-a942-4754-be67-aa815eab5fa2")]
		public global::System.String Name
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return namePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Entity.Name domain property.
		/// </summary>
		internal sealed partial class NamePropertyHandler : DslModeling::DomainPropertyValueHandler<Entity, global::System.String>
		{
			private NamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Entity.Name domain property value handler.
			/// </summary>
			public static readonly NamePropertyHandler Instance = new NamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Entity.Name domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Entity element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.namePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Entity element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.namePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region NHModel opposite domain role accessor
		/// <summary>
		/// Gets or sets NHModel.
		/// Description for EPAM.NHModelingLanguage.NHModelHasEntities.Entity
		/// </summary>
		public virtual NHModel NHModel
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::EPAM.NHModelingLanguage.NHModelHasEntities.EntityDomainRoleId) as NHModel;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::EPAM.NHModelingLanguage.NHModelHasEntities.EntityDomainRoleId, value);
			}
		}
		#endregion
		#region Properties opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Properties.
		/// Description for EPAM.NHModelingLanguage.EntityHasProperties.Entity
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Property> Properties
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Property>, Property>(global::EPAM.NHModelingLanguage.EntityHasProperties.EntityDomainRoleId);
			}
		}
		#endregion
		#region Parent opposite domain role accessor
		/// <summary>
		/// Gets or sets Parent.
		/// Description for EPAM.NHModelingLanguage.EntityInheritedParent.SourceEntity
		/// </summary>
		public virtual Entity Parent
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::EPAM.NHModelingLanguage.EntityInheritedParent.SourceEntityDomainRoleId) as Entity;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::EPAM.NHModelingLanguage.EntityInheritedParent.SourceEntityDomainRoleId, value);
			}
		}
		#endregion
		#region Children opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Children.
		/// Description for EPAM.NHModelingLanguage.EntityInheritedParent.TargetEntity
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Entity> Children
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Entity>, Entity>(global::EPAM.NHModelingLanguage.EntityInheritedParent.TargetEntityDomainRoleId);
			}
		}
		#endregion
		#region ElementGroupPrototype Merge methods
		/// <summary>
		/// Returns a value indicating whether the source element represented by the
		/// specified root ProtoElement can be added to this element.
		/// </summary>
		/// <param name="rootElement">
		/// The root ProtoElement representing a source element.  This can be null, 
		/// in which case the ElementGroupPrototype does not contain an ProtoElements
		/// and the code should inspect the ElementGroupPrototype context information.
		/// </param>
		/// <param name="elementGroupPrototype">The ElementGroupPrototype that contains the root ProtoElement.</param>
		/// <returns>true if the source element represented by the ProtoElement can be added to this target element.</returns>
		protected override bool CanMerge(DslModeling::ProtoElementBase rootElement, DslModeling::ElementGroupPrototype elementGroupPrototype)
		{
			if ( elementGroupPrototype == null ) throw new global::System.ArgumentNullException("elementGroupPrototype");
			
			if (rootElement != null)
			{
				DslModeling::DomainClassInfo rootElementDomainInfo = this.Partition.DomainDataDirectory.GetDomainClass(rootElement.DomainClassId);
				
				if (rootElementDomainInfo.IsDerivedFrom(global::EPAM.NHModelingLanguage.Property.DomainClassId)) 
				{
					return true;
				}
			}
			return base.CanMerge(rootElement, elementGroupPrototype);
		}
		
		/// <summary>
		/// Called by the Merge process to create a relationship between 
		/// this target element and the specified source element. 
		/// Typically, a parent-child relationship is established
		/// between the target element (the parent) and the source element 
		/// (the child), but any relationship can be established.
		/// </summary>
		/// <param name="sourceElement">The element that is to be related to this model element.</param>
		/// <param name="elementGroup">The group of source ModelElements that have been rehydrated into the target store.</param>
		/// <remarks>
		/// This method is overriden to create the relationship between the target element and the specified source element.
		/// The base method does nothing.
		/// </remarks>
		protected override void MergeRelate(DslModeling::ModelElement sourceElement, DslModeling::ElementGroup elementGroup)
		{
			// In general, sourceElement is allowed to be null, meaning that the elementGroup must be parsed for special cases.
			// However this is not supported in generated code.  Use double-deriving on this class and then override MergeRelate completely if you 
			// need to support this case.
			if ( sourceElement == null ) throw new global::System.ArgumentNullException("sourceElement");
		
				
			global::EPAM.NHModelingLanguage.Property sourceProperty1 = sourceElement as global::EPAM.NHModelingLanguage.Property;
			if (sourceProperty1 != null)
			{
				// Create link for path EntityHasProperties.Properties
				this.Properties.Add(sourceProperty1);

				return;
			}
		
			// Sdk workaround to runtime bug #879350 (DSL: can't copy and paste a MEL that has a MEX). Avoid MergeRelate on ModelElementExtension
			// during a "Paste".
			if (sourceElement is DslModeling::ExtensionElement
				&& sourceElement.Store.TransactionManager.CurrentTransaction.TopLevelTransaction.Context.ContextInfo.ContainsKey("{9DAFD42A-DC0E-4d78-8C3F-8266B2CF8B33}"))
			{
				return;
			}
		
			// Fall through to base class if this class hasn't handled the merge.
			base.MergeRelate(sourceElement, elementGroup);
		}
		
		/// <summary>
		/// Performs operation opposite to MergeRelate - i.e. disconnects a given
		/// element from the current one (removes links created by MergeRelate).
		/// </summary>
		/// <param name="sourceElement">Element to be unmerged/disconnected.</param>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
		protected override void MergeDisconnect(DslModeling::ModelElement sourceElement)
		{
			if (sourceElement == null) throw new global::System.ArgumentNullException("sourceElement");
				
			global::EPAM.NHModelingLanguage.Property sourceProperty1 = sourceElement as global::EPAM.NHModelingLanguage.Property;
			if (sourceProperty1 != null)
			{
				// Delete link for path EntityHasProperties.Properties
				
				foreach (DslModeling::ElementLink link in global::EPAM.NHModelingLanguage.EntityHasProperties.GetLinks((global::EPAM.NHModelingLanguage.Entity)this, sourceProperty1))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::EPAM.NHModelingLanguage.EntityHasProperties.EntityDomainRoleId, global::EPAM.NHModelingLanguage.EntityHasProperties.PropertyDomainRoleId);
				}

				return;
			}
			// Fall through to base class if this class hasn't handled the unmerge.
			base.MergeDisconnect(sourceElement);
		}
		#endregion
	}
}
namespace EPAM.NHModelingLanguage
{
	/// <summary>
	/// DomainClass Property
	/// Description for EPAM.NHModelingLanguage.Property
	/// </summary>
	[DslDesign::DisplayNameResource("EPAM.NHModelingLanguage.Property.DisplayName", typeof(global::EPAM.NHModelingLanguage.NHModelingLanguageDomainModel), "SKBKontur.NHModelingLanguage.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("EPAM.NHModelingLanguage.Property.Description", typeof(global::EPAM.NHModelingLanguage.NHModelingLanguageDomainModel), "SKBKontur.NHModelingLanguage.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::EPAM.NHModelingLanguage.NHModelingLanguageDomainModel))]
	[global::System.CLSCompliant(true)]
	[global::System.Diagnostics.DebuggerDisplay("{GetType().Name,nq} (Name = {namePropertyStorage})")]
	[DslModeling::DomainObjectId("ad3169a6-62fb-47f6-b185-9f93f5048837")]
	public partial class Property : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// Property domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xad3169a6, 0x62fb, 0x47f6, 0xb1, 0x85, 0x9f, 0x93, 0xf5, 0x04, 0x88, 0x37);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Property(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Property(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Name domain property code
		
		/// <summary>
		/// Name domain property Id.
		/// </summary>
		public static readonly global::System.Guid NameDomainPropertyId = new global::System.Guid(0x72cda865, 0x300b, 0x4471, 0x96, 0x65, 0xbd, 0xea, 0xab, 0x3b, 0x61, 0x6e);
		
		/// <summary>
		/// Storage for Name
		/// </summary>
		private global::System.String namePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Name domain property.
		/// Description for EPAM.NHModelingLanguage.Property.Name
		/// </summary>
		[DslDesign::DisplayNameResource("EPAM.NHModelingLanguage.Property/Name.DisplayName", typeof(global::EPAM.NHModelingLanguage.NHModelingLanguageDomainModel), "SKBKontur.NHModelingLanguage.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("EPAM.NHModelingLanguage.Property/Name.Description", typeof(global::EPAM.NHModelingLanguage.NHModelingLanguageDomainModel), "SKBKontur.NHModelingLanguage.GeneratedCode.DomainModelResx")]
		[DslModeling::ElementName]
		[DslModeling::DomainObjectId("72cda865-300b-4471-9665-bdeaab3b616e")]
		public global::System.String Name
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return namePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Property.Name domain property.
		/// </summary>
		internal sealed partial class NamePropertyHandler : DslModeling::DomainPropertyValueHandler<Property, global::System.String>
		{
			private NamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Property.Name domain property value handler.
			/// </summary>
			public static readonly NamePropertyHandler Instance = new NamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Property.Name domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Property element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.namePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Property element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.namePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Type domain property code
		
		/// <summary>
		/// Type domain property Id.
		/// </summary>
		public static readonly global::System.Guid TypeDomainPropertyId = new global::System.Guid(0xbd0cb726, 0x12a5, 0x4081, 0x9a, 0xb8, 0xc1, 0x4b, 0x6a, 0xbf, 0xb5, 0xf2);
		
		/// <summary>
		/// Storage for Type
		/// </summary>
		private TypeEnum typePropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of Type domain property.
		/// Description for EPAM.NHModelingLanguage.Property.Type
		/// </summary>
		[DslDesign::DisplayNameResource("EPAM.NHModelingLanguage.Property/Type.DisplayName", typeof(global::EPAM.NHModelingLanguage.NHModelingLanguageDomainModel), "SKBKontur.NHModelingLanguage.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("EPAM.NHModelingLanguage.Property/Type.Description", typeof(global::EPAM.NHModelingLanguage.NHModelingLanguageDomainModel), "SKBKontur.NHModelingLanguage.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("bd0cb726-12a5-4081-9ab8-c14b6abfb5f2")]
		public TypeEnum Type
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return typePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				TypePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Property.Type domain property.
		/// </summary>
		internal sealed partial class TypePropertyHandler : DslModeling::DomainPropertyValueHandler<Property, TypeEnum>
		{
			private TypePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Property.Type domain property value handler.
			/// </summary>
			public static readonly TypePropertyHandler Instance = new TypePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Property.Type domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return TypeDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed TypeEnum GetValue(Property element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.typePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Property element, TypeEnum newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				TypeEnum oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.typePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region DisplayName domain property code
		
		/// <summary>
		/// DisplayName domain property Id.
		/// </summary>
		public static readonly global::System.Guid DisplayNameDomainPropertyId = new global::System.Guid(0xd63b2a0d, 0x1b38, 0x4ea0, 0xa6, 0x9b, 0xd7, 0xc1, 0x93, 0x0e, 0xe9, 0x13);
		
		/// <summary>
		/// Gets or sets the value of DisplayName domain property.
		/// Description for EPAM.NHModelingLanguage.Property.Display Name
		/// </summary>
		[DslDesign::DisplayNameResource("EPAM.NHModelingLanguage.Property/DisplayName.DisplayName", typeof(global::EPAM.NHModelingLanguage.NHModelingLanguageDomainModel), "SKBKontur.NHModelingLanguage.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("EPAM.NHModelingLanguage.Property/DisplayName.Description", typeof(global::EPAM.NHModelingLanguage.NHModelingLanguageDomainModel), "SKBKontur.NHModelingLanguage.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.Browsable(false)]
		[global::System.ComponentModel.ReadOnly(true)]
		[DslModeling::DomainProperty(Kind = DslModeling::DomainPropertyKind.Calculated)]
		[DslModeling::DomainObjectId("d63b2a0d-1b38-4ea0-a69b-d7c1930ee913")]
		public global::System.String DisplayName
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DisplayNamePropertyHandler.Instance.GetValue(this);
			}
		}
		/// <summary>
		/// Value handler for the Property.DisplayName domain property.
		/// </summary>
		internal sealed partial class DisplayNamePropertyHandler : DslModeling::CalculatedPropertyValueHandler<Property, global::System.String>
		{
			private DisplayNamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Property.DisplayName domain property value handler.
			/// </summary>
			public static readonly DisplayNamePropertyHandler Instance = new DisplayNamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Property.DisplayName domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return DisplayNameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Property element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				// There is no storage for DisplayName because its Kind is
				// set to Calculated. Please provide the GetDisplayNameValue()
				// method on the domain class.
				return element.GetDisplayNameValue();
			}
		
		}
		
		#endregion
		#region Entity opposite domain role accessor
		/// <summary>
		/// Gets or sets Entity.
		/// Description for EPAM.NHModelingLanguage.EntityHasProperties.Property
		/// </summary>
		public virtual Entity Entity
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::EPAM.NHModelingLanguage.EntityHasProperties.PropertyDomainRoleId) as Entity;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::EPAM.NHModelingLanguage.EntityHasProperties.PropertyDomainRoleId, value);
			}
		}
		#endregion
	}
}
