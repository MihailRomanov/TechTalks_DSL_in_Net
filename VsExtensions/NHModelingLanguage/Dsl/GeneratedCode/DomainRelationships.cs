//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DslModeling = global::Microsoft.VisualStudio.Modeling;
using DslDesign = global::Microsoft.VisualStudio.Modeling.Design;
namespace EPAM.NHModelingLanguage
{
	/// <summary>
	/// DomainRelationship NHModelHasEntities
	/// Description for EPAM.NHModelingLanguage.NHModelHasEntities
	/// </summary>
	[DslDesign::DisplayNameResource("EPAM.NHModelingLanguage.NHModelHasEntities.DisplayName", typeof(global::EPAM.NHModelingLanguage.NHModelingLanguageDomainModel), "SKBKontur.NHModelingLanguage.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("EPAM.NHModelingLanguage.NHModelHasEntities.Description", typeof(global::EPAM.NHModelingLanguage.NHModelingLanguageDomainModel), "SKBKontur.NHModelingLanguage.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::EPAM.NHModelingLanguage.NHModelingLanguageDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("9eda0661-f5e6-4e67-9a59-be5a6c6e0b47")]
	public partial class NHModelHasEntities : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// NHModelHasEntities domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x9eda0661, 0xf5e6, 0x4e67, 0x9a, 0x59, 0xbe, 0x5a, 0x6c, 0x6e, 0x0b, 0x47);
	
				
		/// <summary>
		/// Constructor
		/// Creates a NHModelHasEntities link in the same Partition as the given NHModel
		/// </summary>
		/// <param name="source">NHModel to use as the source of the relationship.</param>
		/// <param name="target">Entity to use as the target of the relationship.</param>
		public NHModelHasEntities(NHModel source, Entity target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(NHModelHasEntities.NHModelDomainRoleId, source), new DslModeling::RoleAssignment(NHModelHasEntities.EntityDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public NHModelHasEntities(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public NHModelHasEntities(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public NHModelHasEntities(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public NHModelHasEntities(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region NHModel domain role code
		
		/// <summary>
		/// NHModel domain role Id.
		/// </summary>
		public static readonly global::System.Guid NHModelDomainRoleId = new global::System.Guid(0xa6b1340f, 0x9030, 0x4230, 0xb5, 0xb8, 0xd4, 0xa6, 0xa1, 0x2f, 0x71, 0x00);
		
		/// <summary>
		/// DomainRole NHModel
		/// Description for EPAM.NHModelingLanguage.NHModelHasEntities.NHModel
		/// </summary>
		[DslDesign::DisplayNameResource("EPAM.NHModelingLanguage.NHModelHasEntities/NHModel.DisplayName", typeof(global::EPAM.NHModelingLanguage.NHModelingLanguageDomainModel), "SKBKontur.NHModelingLanguage.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("EPAM.NHModelingLanguage.NHModelHasEntities/NHModel.Description", typeof(global::EPAM.NHModelingLanguage.NHModelingLanguageDomainModel), "SKBKontur.NHModelingLanguage.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Entities", PropertyDisplayNameKey="EPAM.NHModelingLanguage.NHModelHasEntities/NHModel.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("a6b1340f-9030-4230-b5b8-d4a6a12f7100")]
		public virtual NHModel NHModel
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (NHModel)DslModeling::DomainRoleInfo.GetRolePlayer(this, NHModelDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, NHModelDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access NHModel of a Entity
		/// <summary>
		/// Gets NHModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static NHModel GetNHModel(Entity element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, EntityDomainRoleId) as NHModel;
		}
		
		/// <summary>
		/// Sets NHModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetNHModel(Entity element, NHModel newNHModel)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, EntityDomainRoleId, newNHModel);
		}
		#endregion
		#region Entity domain role code
		
		/// <summary>
		/// Entity domain role Id.
		/// </summary>
		public static readonly global::System.Guid EntityDomainRoleId = new global::System.Guid(0x4e466b8a, 0x445d, 0x4fbf, 0xaf, 0x1d, 0x41, 0xee, 0x3b, 0xbc, 0x37, 0x64);
		
		/// <summary>
		/// DomainRole Entity
		/// Description for EPAM.NHModelingLanguage.NHModelHasEntities.Entity
		/// </summary>
		[DslDesign::DisplayNameResource("EPAM.NHModelingLanguage.NHModelHasEntities/Entity.DisplayName", typeof(global::EPAM.NHModelingLanguage.NHModelingLanguageDomainModel), "SKBKontur.NHModelingLanguage.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("EPAM.NHModelingLanguage.NHModelHasEntities/Entity.Description", typeof(global::EPAM.NHModelingLanguage.NHModelingLanguageDomainModel), "SKBKontur.NHModelingLanguage.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "NHModel", PropertyDisplayNameKey="EPAM.NHModelingLanguage.NHModelHasEntities/Entity.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("4e466b8a-445d-4fbf-af1d-41ee3bbc3764")]
		public virtual Entity Entity
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Entity)DslModeling::DomainRoleInfo.GetRolePlayer(this, EntityDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, EntityDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Entities of a NHModel
		/// <summary>
		/// Gets a list of Entities.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Entity> GetEntities(NHModel element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Entity>, Entity>(element, NHModelDomainRoleId);
		}
		#endregion
		#region NHModel link accessor
		/// <summary>
		/// Get the list of NHModelHasEntities links to a NHModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::EPAM.NHModelingLanguage.NHModelHasEntities> GetLinksToEntities ( global::EPAM.NHModelingLanguage.NHModel nHModelInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::EPAM.NHModelingLanguage.NHModelHasEntities>(nHModelInstance, global::EPAM.NHModelingLanguage.NHModelHasEntities.NHModelDomainRoleId);
		}
		#endregion
		#region Entity link accessor
		/// <summary>
		/// Get the NHModelHasEntities link to a Entity.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::EPAM.NHModelingLanguage.NHModelHasEntities GetLinkToNHModel (global::EPAM.NHModelingLanguage.Entity entityInstance)
		{
			global::System.Collections.Generic.IList<global::EPAM.NHModelingLanguage.NHModelHasEntities> links = DslModeling::DomainRoleInfo.GetElementLinks<global::EPAM.NHModelingLanguage.NHModelHasEntities>(entityInstance, global::EPAM.NHModelingLanguage.NHModelHasEntities.EntityDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Entity not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region NHModelHasEntities instance accessors
		
		/// <summary>
		/// Get any NHModelHasEntities links between a given NHModel and a Entity.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::EPAM.NHModelingLanguage.NHModelHasEntities> GetLinks( global::EPAM.NHModelingLanguage.NHModel source, global::EPAM.NHModelingLanguage.Entity target )
		{
			global::System.Collections.Generic.List<global::EPAM.NHModelingLanguage.NHModelHasEntities> outLinks = new global::System.Collections.Generic.List<global::EPAM.NHModelingLanguage.NHModelHasEntities>();
			global::System.Collections.Generic.IList<global::EPAM.NHModelingLanguage.NHModelHasEntities> links = DslModeling::DomainRoleInfo.GetElementLinks<global::EPAM.NHModelingLanguage.NHModelHasEntities>(source, global::EPAM.NHModelingLanguage.NHModelHasEntities.NHModelDomainRoleId);
			foreach ( global::EPAM.NHModelingLanguage.NHModelHasEntities link in links )
			{
				if ( target.Equals(link.Entity) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one NHModelHasEntities link between a given NHModeland a Entity.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::EPAM.NHModelingLanguage.NHModelHasEntities GetLink( global::EPAM.NHModelingLanguage.NHModel source, global::EPAM.NHModelingLanguage.Entity target )
		{
			global::System.Collections.Generic.IList<global::EPAM.NHModelingLanguage.NHModelHasEntities> links = DslModeling::DomainRoleInfo.GetElementLinks<global::EPAM.NHModelingLanguage.NHModelHasEntities>(source, global::EPAM.NHModelingLanguage.NHModelHasEntities.NHModelDomainRoleId);
			foreach ( global::EPAM.NHModelingLanguage.NHModelHasEntities link in links )
			{
				if ( target.Equals(link.Entity) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace EPAM.NHModelingLanguage
{
	/// <summary>
	/// DomainRelationship EntityHasProperties
	/// Description for EPAM.NHModelingLanguage.EntityHasProperties
	/// </summary>
	[DslDesign::DisplayNameResource("EPAM.NHModelingLanguage.EntityHasProperties.DisplayName", typeof(global::EPAM.NHModelingLanguage.NHModelingLanguageDomainModel), "SKBKontur.NHModelingLanguage.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("EPAM.NHModelingLanguage.EntityHasProperties.Description", typeof(global::EPAM.NHModelingLanguage.NHModelingLanguageDomainModel), "SKBKontur.NHModelingLanguage.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::EPAM.NHModelingLanguage.NHModelingLanguageDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("fae53cd7-45ba-4f32-8321-d04cf03a08c8")]
	public partial class EntityHasProperties : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// EntityHasProperties domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xfae53cd7, 0x45ba, 0x4f32, 0x83, 0x21, 0xd0, 0x4c, 0xf0, 0x3a, 0x08, 0xc8);
	
				
		/// <summary>
		/// Constructor
		/// Creates a EntityHasProperties link in the same Partition as the given Entity
		/// </summary>
		/// <param name="source">Entity to use as the source of the relationship.</param>
		/// <param name="target">Property to use as the target of the relationship.</param>
		public EntityHasProperties(Entity source, Property target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(EntityHasProperties.EntityDomainRoleId, source), new DslModeling::RoleAssignment(EntityHasProperties.PropertyDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public EntityHasProperties(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public EntityHasProperties(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public EntityHasProperties(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public EntityHasProperties(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Entity domain role code
		
		/// <summary>
		/// Entity domain role Id.
		/// </summary>
		public static readonly global::System.Guid EntityDomainRoleId = new global::System.Guid(0x0750cb35, 0x73db, 0x46b3, 0xa5, 0xd0, 0x71, 0x43, 0x6d, 0xb3, 0xd4, 0xbb);
		
		/// <summary>
		/// DomainRole Entity
		/// Description for EPAM.NHModelingLanguage.EntityHasProperties.Entity
		/// </summary>
		[DslDesign::DisplayNameResource("EPAM.NHModelingLanguage.EntityHasProperties/Entity.DisplayName", typeof(global::EPAM.NHModelingLanguage.NHModelingLanguageDomainModel), "SKBKontur.NHModelingLanguage.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("EPAM.NHModelingLanguage.EntityHasProperties/Entity.Description", typeof(global::EPAM.NHModelingLanguage.NHModelingLanguageDomainModel), "SKBKontur.NHModelingLanguage.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Properties", PropertyDisplayNameKey="EPAM.NHModelingLanguage.EntityHasProperties/Entity.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("0750cb35-73db-46b3-a5d0-71436db3d4bb")]
		public virtual Entity Entity
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Entity)DslModeling::DomainRoleInfo.GetRolePlayer(this, EntityDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, EntityDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Entity of a Property
		/// <summary>
		/// Gets Entity.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Entity GetEntity(Property element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, PropertyDomainRoleId) as Entity;
		}
		
		/// <summary>
		/// Sets Entity.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetEntity(Property element, Entity newEntity)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, PropertyDomainRoleId, newEntity);
		}
		#endregion
		#region Property domain role code
		
		/// <summary>
		/// Property domain role Id.
		/// </summary>
		public static readonly global::System.Guid PropertyDomainRoleId = new global::System.Guid(0x6fe93a27, 0xa821, 0x4438, 0x98, 0x6b, 0xe0, 0x5d, 0x82, 0x8e, 0xa3, 0x7c);
		
		/// <summary>
		/// DomainRole Property
		/// Description for EPAM.NHModelingLanguage.EntityHasProperties.Property
		/// </summary>
		[DslDesign::DisplayNameResource("EPAM.NHModelingLanguage.EntityHasProperties/Property.DisplayName", typeof(global::EPAM.NHModelingLanguage.NHModelingLanguageDomainModel), "SKBKontur.NHModelingLanguage.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("EPAM.NHModelingLanguage.EntityHasProperties/Property.Description", typeof(global::EPAM.NHModelingLanguage.NHModelingLanguageDomainModel), "SKBKontur.NHModelingLanguage.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Entity", PropertyDisplayNameKey="EPAM.NHModelingLanguage.EntityHasProperties/Property.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("6fe93a27-a821-4438-986b-e05d828ea37c")]
		public virtual Property Property
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Property)DslModeling::DomainRoleInfo.GetRolePlayer(this, PropertyDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, PropertyDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Properties of a Entity
		/// <summary>
		/// Gets a list of Properties.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Property> GetProperties(Entity element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Property>, Property>(element, EntityDomainRoleId);
		}
		#endregion
		#region Entity link accessor
		/// <summary>
		/// Get the list of EntityHasProperties links to a Entity.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::EPAM.NHModelingLanguage.EntityHasProperties> GetLinksToProperties ( global::EPAM.NHModelingLanguage.Entity entityInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::EPAM.NHModelingLanguage.EntityHasProperties>(entityInstance, global::EPAM.NHModelingLanguage.EntityHasProperties.EntityDomainRoleId);
		}
		#endregion
		#region Property link accessor
		/// <summary>
		/// Get the EntityHasProperties link to a Property.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::EPAM.NHModelingLanguage.EntityHasProperties GetLinkToEntity (global::EPAM.NHModelingLanguage.Property propertyInstance)
		{
			global::System.Collections.Generic.IList<global::EPAM.NHModelingLanguage.EntityHasProperties> links = DslModeling::DomainRoleInfo.GetElementLinks<global::EPAM.NHModelingLanguage.EntityHasProperties>(propertyInstance, global::EPAM.NHModelingLanguage.EntityHasProperties.PropertyDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Property not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region EntityHasProperties instance accessors
		
		/// <summary>
		/// Get any EntityHasProperties links between a given Entity and a Property.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::EPAM.NHModelingLanguage.EntityHasProperties> GetLinks( global::EPAM.NHModelingLanguage.Entity source, global::EPAM.NHModelingLanguage.Property target )
		{
			global::System.Collections.Generic.List<global::EPAM.NHModelingLanguage.EntityHasProperties> outLinks = new global::System.Collections.Generic.List<global::EPAM.NHModelingLanguage.EntityHasProperties>();
			global::System.Collections.Generic.IList<global::EPAM.NHModelingLanguage.EntityHasProperties> links = DslModeling::DomainRoleInfo.GetElementLinks<global::EPAM.NHModelingLanguage.EntityHasProperties>(source, global::EPAM.NHModelingLanguage.EntityHasProperties.EntityDomainRoleId);
			foreach ( global::EPAM.NHModelingLanguage.EntityHasProperties link in links )
			{
				if ( target.Equals(link.Property) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one EntityHasProperties link between a given Entityand a Property.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::EPAM.NHModelingLanguage.EntityHasProperties GetLink( global::EPAM.NHModelingLanguage.Entity source, global::EPAM.NHModelingLanguage.Property target )
		{
			global::System.Collections.Generic.IList<global::EPAM.NHModelingLanguage.EntityHasProperties> links = DslModeling::DomainRoleInfo.GetElementLinks<global::EPAM.NHModelingLanguage.EntityHasProperties>(source, global::EPAM.NHModelingLanguage.EntityHasProperties.EntityDomainRoleId);
			foreach ( global::EPAM.NHModelingLanguage.EntityHasProperties link in links )
			{
				if ( target.Equals(link.Property) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace EPAM.NHModelingLanguage
{
	/// <summary>
	/// DomainRelationship EntityInheritedParent
	/// Description for EPAM.NHModelingLanguage.EntityInheritedParent
	/// </summary>
	[DslDesign::DisplayNameResource("EPAM.NHModelingLanguage.EntityInheritedParent.DisplayName", typeof(global::EPAM.NHModelingLanguage.NHModelingLanguageDomainModel), "SKBKontur.NHModelingLanguage.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("EPAM.NHModelingLanguage.EntityInheritedParent.Description", typeof(global::EPAM.NHModelingLanguage.NHModelingLanguageDomainModel), "SKBKontur.NHModelingLanguage.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::EPAM.NHModelingLanguage.NHModelingLanguageDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("e8574d96-4785-4cfa-a868-14020741031b")]
	public partial class EntityInheritedParent : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// EntityInheritedParent domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xe8574d96, 0x4785, 0x4cfa, 0xa8, 0x68, 0x14, 0x02, 0x07, 0x41, 0x03, 0x1b);
	
				
		/// <summary>
		/// Constructor
		/// Creates a EntityInheritedParent link in the same Partition as the given Entity
		/// </summary>
		/// <param name="source">Entity to use as the source of the relationship.</param>
		/// <param name="target">Entity to use as the target of the relationship.</param>
		public EntityInheritedParent(Entity source, Entity target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(EntityInheritedParent.SourceEntityDomainRoleId, source), new DslModeling::RoleAssignment(EntityInheritedParent.TargetEntityDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public EntityInheritedParent(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public EntityInheritedParent(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public EntityInheritedParent(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public EntityInheritedParent(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region SourceEntity domain role code
		
		/// <summary>
		/// SourceEntity domain role Id.
		/// </summary>
		public static readonly global::System.Guid SourceEntityDomainRoleId = new global::System.Guid(0x7a2853bc, 0xe78e, 0x4cc6, 0xaa, 0x4e, 0xd9, 0x92, 0x53, 0x9b, 0xfa, 0x6a);
		
		/// <summary>
		/// DomainRole SourceEntity
		/// Description for EPAM.NHModelingLanguage.EntityInheritedParent.SourceEntity
		/// </summary>
		[DslDesign::DisplayNameResource("EPAM.NHModelingLanguage.EntityInheritedParent/SourceEntity.DisplayName", typeof(global::EPAM.NHModelingLanguage.NHModelingLanguageDomainModel), "SKBKontur.NHModelingLanguage.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("EPAM.NHModelingLanguage.EntityInheritedParent/SourceEntity.Description", typeof(global::EPAM.NHModelingLanguage.NHModelingLanguageDomainModel), "SKBKontur.NHModelingLanguage.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Parent", PropertyDisplayNameKey="EPAM.NHModelingLanguage.EntityInheritedParent/SourceEntity.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("7a2853bc-e78e-4cc6-aa4e-d992539bfa6a")]
		public virtual Entity SourceEntity
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Entity)DslModeling::DomainRoleInfo.GetRolePlayer(this, SourceEntityDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, SourceEntityDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Children of a Entity
		/// <summary>
		/// Gets a list of Children.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Entity> GetChildren(Entity element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Entity>, Entity>(element, TargetEntityDomainRoleId);
		}
		#endregion
		#region TargetEntity domain role code
		
		/// <summary>
		/// TargetEntity domain role Id.
		/// </summary>
		public static readonly global::System.Guid TargetEntityDomainRoleId = new global::System.Guid(0xbbee86fd, 0xe200, 0x47bb, 0xad, 0x2b, 0xfa, 0x68, 0x95, 0x2d, 0xb9, 0x3c);
		
		/// <summary>
		/// DomainRole TargetEntity
		/// Description for EPAM.NHModelingLanguage.EntityInheritedParent.TargetEntity
		/// </summary>
		[DslDesign::DisplayNameResource("EPAM.NHModelingLanguage.EntityInheritedParent/TargetEntity.DisplayName", typeof(global::EPAM.NHModelingLanguage.NHModelingLanguageDomainModel), "SKBKontur.NHModelingLanguage.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("EPAM.NHModelingLanguage.EntityInheritedParent/TargetEntity.Description", typeof(global::EPAM.NHModelingLanguage.NHModelingLanguageDomainModel), "SKBKontur.NHModelingLanguage.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Children", PropertyDisplayNameKey="EPAM.NHModelingLanguage.EntityInheritedParent/TargetEntity.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("bbee86fd-e200-47bb-ad2b-fa68952db93c")]
		public virtual Entity TargetEntity
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Entity)DslModeling::DomainRoleInfo.GetRolePlayer(this, TargetEntityDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, TargetEntityDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Parent of a Entity
		/// <summary>
		/// Gets Parent.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Entity GetParent(Entity element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, SourceEntityDomainRoleId) as Entity;
		}
		
		/// <summary>
		/// Sets Parent.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetParent(Entity element, Entity newTargetEntity)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, SourceEntityDomainRoleId, newTargetEntity);
		}
		#endregion
		#region SourceEntity link accessor
		/// <summary>
		/// Get the EntityInheritedParent link to a Entity.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::EPAM.NHModelingLanguage.EntityInheritedParent GetLinkToParent (global::EPAM.NHModelingLanguage.Entity sourceEntityInstance)
		{
			global::System.Collections.Generic.IList<global::EPAM.NHModelingLanguage.EntityInheritedParent> links = DslModeling::DomainRoleInfo.GetElementLinks<global::EPAM.NHModelingLanguage.EntityInheritedParent>(sourceEntityInstance, global::EPAM.NHModelingLanguage.EntityInheritedParent.SourceEntityDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of SourceEntity not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region TargetEntity link accessor
		/// <summary>
		/// Get the list of EntityInheritedParent links to a Entity.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::EPAM.NHModelingLanguage.EntityInheritedParent> GetLinksToChildren ( global::EPAM.NHModelingLanguage.Entity targetEntityInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::EPAM.NHModelingLanguage.EntityInheritedParent>(targetEntityInstance, global::EPAM.NHModelingLanguage.EntityInheritedParent.TargetEntityDomainRoleId);
		}
		#endregion
		#region EntityInheritedParent instance accessors
		
		/// <summary>
		/// Get any EntityInheritedParent links between a given Entity and a Entity.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::EPAM.NHModelingLanguage.EntityInheritedParent> GetLinks( global::EPAM.NHModelingLanguage.Entity source, global::EPAM.NHModelingLanguage.Entity target )
		{
			global::System.Collections.Generic.List<global::EPAM.NHModelingLanguage.EntityInheritedParent> outLinks = new global::System.Collections.Generic.List<global::EPAM.NHModelingLanguage.EntityInheritedParent>();
			global::System.Collections.Generic.IList<global::EPAM.NHModelingLanguage.EntityInheritedParent> links = DslModeling::DomainRoleInfo.GetElementLinks<global::EPAM.NHModelingLanguage.EntityInheritedParent>(source, global::EPAM.NHModelingLanguage.EntityInheritedParent.SourceEntityDomainRoleId);
			foreach ( global::EPAM.NHModelingLanguage.EntityInheritedParent link in links )
			{
				if ( target.Equals(link.TargetEntity) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one EntityInheritedParent link between a given Entityand a Entity.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::EPAM.NHModelingLanguage.EntityInheritedParent GetLink( global::EPAM.NHModelingLanguage.Entity source, global::EPAM.NHModelingLanguage.Entity target )
		{
			global::System.Collections.Generic.IList<global::EPAM.NHModelingLanguage.EntityInheritedParent> links = DslModeling::DomainRoleInfo.GetElementLinks<global::EPAM.NHModelingLanguage.EntityInheritedParent>(source, global::EPAM.NHModelingLanguage.EntityInheritedParent.SourceEntityDomainRoleId);
			foreach ( global::EPAM.NHModelingLanguage.EntityInheritedParent link in links )
			{
				if ( target.Equals(link.TargetEntity) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
